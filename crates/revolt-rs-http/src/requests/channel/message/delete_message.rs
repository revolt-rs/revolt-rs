use revolt_rs_model::{
    channel::message::Message,
    id::{ChannelMarker, Id, MessageMarker},
};
use serde::{Deserialize, Serialize};

use crate::{
    client::{Client, ResponseExt},
    error::Errors,
};

type Result<T> = std::result::Result<T, Errors>;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageType {
    /// Unique Id
    #[serde(rename = "_id")]
    pub id: String,
    /// Unique value generated by client sending this message
    #[serde(rename = "nonce", default, skip_serializing_if = "Option::is_none")]
    pub nonce: Option<Option<String>>,
    /// Resolved channel object
    #[serde(rename = "channel")]
    pub channel: Id<ChannelMarker>,
    /// Id of the user or webhook that sent this message
    #[serde(rename = "author")]
    pub author: String,
}

impl Client { 
    /// Delete a message using [`Id<ChannelMarker>`] and [`Id<MessageMarker>`].
    /// 
    /// Requires the [`ManageMessages`] permission to delete someone elses message.
    pub async fn delete_message(
        &self,
        channel_id: Id<ChannelMarker>,
        message_id: Id<MessageMarker>,
    ) -> Result<()> {
        self.http
            .delete(format!(
                "{}/channels/{}/messages/{}",
                self.base_url.as_deref().unwrap().to_string(),
                channel_id.get(),
                message_id.get(),
            ))
            .send()
            .await?
            .process_error()
            .await?;
        Ok(())
    }
}
